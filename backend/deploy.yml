---
- name: Clean Up Previous Deployment
  hosts: app_servers
  become: true
  tasks:
    - name: Stop the backend service if running
      systemd:
        name: backend-api
        state: stopped
      ignore_errors: yes

    - name: Stop Nginx
      systemd:
        name: nginx
        state: stopped
      ignore_errors: yes

    - name: Remove Gunicorn systemd service file
      file:
        path: /etc/systemd/system/backend-api.service
        state: absent

    - name: Remove Nginx configuration file for the app
      file:
        path: /etc/nginx/sites-available/backend-api
        state: absent

    - name: Remove enabled Nginx site link for the app
      file:
        path: /etc/nginx/sites-enabled/backend-api
        state: absent

    - name: Remove application directory
      file:
        path: /opt/backend-api
        state: absent

    - name: Remove app user if exists
      user:
        name: appuser
        state: absent
        remove: yes

    - name: Remove app group if exists
      group:
        name: appgroup
        state: absent

- name: Deploy Backend API Fresh
  hosts: app_servers
  become: true
  vars:
    app_name: backend-api
    app_directory: /opt/{{ app_name }}
    app_user: appuser
    app_group: appgroup
    venv_path: "{{ app_directory }}/venv"
    # Database and secret configuration can be set via environment variables or overridden here.
    db_host: "{{ lookup('env', 'DB_HOST') | default('localhost', true) }}"
    db_port: "{{ lookup('env', 'DB_PORT') | default('5432', true) }}"
    db_name: "{{ lookup('env', 'DB_NAME') | default('mydb', true) }}"
    db_user: "{{ lookup('env', 'DB_USER') | default('postgres', true) }}"
    db_password: "{{ lookup('env', 'DB_PASSWORD') | default('password', true) }}"
    secret_key: "{{ lookup('env', 'SECRET_KEY') | default(lookup('password', '/dev/null chars=ascii_letters,digits length=50'), true) }}"
    jwt_secret_key: "{{ lookup('env', 'JWT_SECRET_KEY') | default(lookup('password', '/dev/null chars=ascii_letters,digits length=50'), true) }}"
    # Define the Git repository and branch for your application code:
    git_repo: "https://github.com/Chiqo-ke/intelligent-OCR"
    git_branch: "backend"

  tasks:
    - name: Install system dependencies
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - postgresql-client
          - nginx
        state: present
        update_cache: yes

    - name: Create app group
      group:
        name: "{{ app_group }}"
        state: present
        system: yes

    - name: Create app user
      user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        system: yes
        create_home: yes
        shell: /bin/false

    - name: Create application directory
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'

    - name: Clone or update application repository
      git:
        repo: "{{ git_repo }}"
        dest: "{{ app_directory }}/src"
        version: "{{ git_branch }}"
        update: yes
      become_user: "{{ app_user }}"
      register: git_clone

    - name: Create Python virtual environment
      command: python3 -m venv "{{ venv_path }}"
      args:
        creates: "{{ venv_path }}/bin/activate"
      become_user: "{{ app_user }}"

    - name: Install Python requirements
      pip:
        requirements: "{{ app_directory }}requirements.txt"
        virtualenv: "{{ venv_path }}"
      become_user: "{{ app_user }}"
      register: pip_install

    - name: Create environment file for the app
      template:
        src: templates/.env.j2
        dest: "{{ app_directory }}/src/.env"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0600'
      notify: Restart Gunicorn

    - name: Create Gunicorn systemd service file
      template:
        src: templates/gunicorn.service.j2
        dest: /etc/systemd/system/{{ app_name }}.service
        owner: root
        group: root
        mode: '0644'
      notify: Restart Gunicorn

    - name: Create Nginx configuration file for the app
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/sites-available/{{ app_name }}
        owner: root
        group: root
        mode: '0644'
      notify: Restart Nginx

    - name: Enable Nginx site for the app
      file:
        src: /etc/nginx/sites-available/{{ app_name }}
        dest: /etc/nginx/sites-enabled/{{ app_name }}
        state: link
      notify: Restart Nginx

    - name: Start and enable backend and Nginx services
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - "{{ app_name }}"
        - nginx

  handlers:
    - name: Restart Gunicorn
      systemd:
        name: "{{ app_name }}"
        state: restarted
        daemon_reload: yes

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted
